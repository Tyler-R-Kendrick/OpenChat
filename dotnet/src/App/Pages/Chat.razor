@page "/chat"
@inject IJSRuntime JSRuntime
@inject ILogger<Chat> Logger
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web

<script>
    // wwwroot/js/preventEnter.js
    window.preventEnterDefault = (textarea) => {
        textarea.addEventListener('keydown', (e) => {
            var isEnterKey = e.key === 'Enter' || e.key === 'NumpadEnter';
            var hasAdditionalKey = e.shiftKey || e.ctrlKey || e.altKey || e.metaKey;
            if (isEnterKey && !hasAdditionalKey) {
                e.preventDefault();
            }
        });
    };
</script>

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        margin: 0;
        padding: 0;
    }

    .messageHistory {
        display: flex;
        flex: 1;
        overflow-y: auto;
    }
    
    .form-container {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: #fff;
        padding: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }
</style>
<style>
    * {
        box-sizing: content-box;
    }
    li {
        display: inline-block;
        width: 100vh;
        height: auto;
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .user {
        text-align: right;
        float: right;
    }

    .assistant {
        text-align: left;
        float: left;
    }

    .message {
        display: block;
        max-width: 60%;
        min-width: 30%;
        margin: 0.5rem;
        padding: 0.5rem;
        border-radius: 0.5rem;
    }

    .message.user {
        background-color: #f0f0f0;
    }

    .message.assistant {
        background-color: #e0e0e0;
    }
</style>
<div class="chat-container">
    <h1>Chat</h1>
    <div class="messageHistory">
        <ul>
        @foreach (var message in history)
        {
            <li>
                <span class="@message.Role message">
                    <strong>@message.Role</strong>: <p>@message.Content</p>
                </span>
            </li>
        }
        </ul>
    </div>

    <EditForm
        EditContext="_editContext"
        OnValidSubmit="Submit"
        class="form-container">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <AntiforgeryToken />
        <textarea
            @bind="@_model.Text"
            @bind:event="oninput"
            @onkeydown="HandleTextAreaKeyDown"
            @ref="_textareaRef"
            class="form-control" />
        <button type="submit" class="btn btn-primary mt-3">Submit</button>
    </EditForm>
</div>

@code {
    private List<Message> history = [];
    private ElementReference? _textareaRef;
    private Model _model = new();
    private EditContext? _editContext;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("preventEnterDefault", _textareaRef!);
        }
    }

    protected override void OnInitialized()
    {
        _editContext = new(_model);
        base.OnInitialized();
    }

    private async Task HandleTextAreaKeyDown(KeyboardEventArgs e)
    {
        var isEnterKey = e.Key == "Enter" || e.Key == "NumpadEnter";
        var hasAdditionalKey = e.ShiftKey || e.CtrlKey || e.AltKey || e.MetaKey;
        if (isEnterKey && !hasAdditionalKey && _editContext!.Validate())
        {
            await Submit();
        }
    }

    private async Task Submit()
    {
        var modelText = _model.Text;
        RequestModel requestModel = new(modelText);
        Logger.LogInformation("User input: {Input}", modelText);
        if (!string.IsNullOrWhiteSpace(modelText))
        {
            history.Add(new("user", modelText));
            _model.Text = "";
        }

        var assistantResponse = "";
        history.Add(new("assistant", assistantResponse));
        await foreach (var message in GetAssistantResponse(requestModel))
        {
            assistantResponse += message.Content;
            history[^1] = new("assistant", assistantResponse);
        }
    }

    private Random random = new();
    public record RequestModel(string? Input);
    private async IAsyncEnumerable<Message> GetAssistantResponse(RequestModel requestModel)
    {
        var response = $"Responding to: {requestModel.Input}";
        // chunk the response into every 3 characters
        for (var i = 0; i < response.Length; i += 3)
        {
            var chunk = response.Substring(i, Math.Min(3, response.Length - i));
            yield return new("assistant", chunk);
            var delay = random.Next(100, 500);
            await Task.Delay(delay);
        }
    }

    public class Model
    {
        [Required(ErrorMessage = "Text is required")]
        [StringLength(500, ErrorMessage = "Text must be less than 500 characters")]
        public string? Text { get; set; }
    }
    
    public class Message(
        string role,
        string content)
    {
        public string Id = Guid.NewGuid().ToString();

        [Required]
        public string Role { get; set; } = role;
        [Required]
        public string Content { get; set; } = content;
    }
}
