@page "/chat"
@inject ILogger<Chat> Logger

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        margin: 0;
        padding: 0;
    }
    
    .form-container {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: #fff;
        padding: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }
</style>

<div class="chat-container">
    <h1>Chat</h1>
    
    <OpenChat.App.Components.ChatHistory.Component @ref="HistoryElement" />
    <OpenChat.App.Components.ChatInputBox.Component OnSubmit="HandleSubmit" />
</div>

@code {
    private OpenChat.App.Components.ChatHistory.Component? HistoryElement;
    public System.Collections.ObjectModel.ObservableCollection<OpenChat.App.Components.ChatHistory.Component.Message> History => HistoryElement!.History;

    private async Task HandleSubmit(OpenChat.App.Components.ChatInputBox.Component.Model model)
    {
        var modelText = model.Text!;
        Logger.LogInformation("User input: {Input}", modelText);
        HistoryElement?.Add("user", modelText);
        RequestModel requestModel = new(modelText);
        await HandleAssistantResponse(requestModel);
    }

    private async Task HandleAssistantResponse(RequestModel requestModel)
    {
        OpenChat.App.Components.ChatHistory.Component.Message response = new("assistant", "", Logger);
        HistoryElement?.Add(response);
        await foreach (var message in GetAssistantResponse(requestModel))
        {
            response.Content += message.Content;
        }
        Logger.LogInformation("Assistant response: {Response}", response);
    }
    
    private Random random = new();
    public record RequestModel(string? Input);
    private async IAsyncEnumerable<OpenChat.App.Components.ChatHistory.Component.Message> GetAssistantResponse(RequestModel requestModel)
    {
        var response = $"Responding to: {requestModel.Input}";
        // chunk the response into every 3 characters
        for (var i = 0; i < response.Length; i += 3)
        {
            var chunk = response.Substring(i, Math.Min(3, response.Length - i));
            yield return new("assistant", chunk, Logger);
            var delay = random.Next(100, 500);
            await Task.Delay(delay);
        }
    }
}
